{
	"info": {
		"_postman_id": "a9b6a802-ea98-4291-9530-7ad368b1490d",
		"name": "Tests_for_MedScheduler",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44648037",
		"_collection_link": "https://meduser.postman.co/workspace/meduser%D1%8B-Workspace~f64d2850-6f51-4441-8b75-24e8c1af1943/collection/44648037-a9b6a802-ea98-4291-9530-7ad368b1490d?action=share&source=collection_link&creator=44648037"
	},
	"item": [
		{
			"name": "Adding and change  data",
			"item": [
				{
					"name": "Checking users table is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"        success: true,\r",
									"        users: [\r",
									"            {\r",
									"                first_name: \"\",\r",
									"                id: \"1\",\r",
									"                last_name: \"\",\r",
									"                patronymic: \"\",\r",
									"                phone: \"+71234567890\",\r",
									"                user_type: \"senior administrator\"\r",
									"            }\r",
									"        ]\r",
									"    };\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_users"
							]
						},
						"description": "Проверяем что таблица пуста"
					},
					"response": []
				},
				{
					"name": "Add junior admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"junior-last-name\",\r\n  \"first_name\": \"junior-first-name\",\r\n  \"patronymic\": \"junior-middle-name\",\r\n  \"phone\": \"+70000000002\",\r\n  \"user_type\": \"junior admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_junior_admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_junior_admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding junior admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true,\r",
									"    \"users\": [\r",
									"        {\r",
									"            \"first_name\": \"\",\r",
									"            \"id\": \"1\",\r",
									"            \"last_name\": \"\",\r",
									"            \"patronymic\": \"\",\r",
									"            \"phone\": \"+71234567890\",\r",
									"            \"user_type\": \"senior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"junior-first-name\",\r",
									"            \"id\": \"2\",\r",
									"            \"last_name\": \"junior-last-name\",\r",
									"            \"patronymic\": \"junior-middle-name\",\r",
									"            \"phone\": \"+70000000002\",\r",
									"            \"user_type\": \"junior administrator\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add same phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Phone already registered\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"bad-junior-last-name\",\r\n  \"first_name\": \"bad-junior-first-name\",\r\n  \"patronymic\": \"bad-junior-middle-name\",\r\n  \"phone\": \"+70000000002\",\r\n  \"user_type\": \"junior admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_junior_admin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_junior_admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Doctor successfully added\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"test-doctor-last-name\",\r\n  \"first_name\": \"test-doctor-first-name\",\r\n  \"patronymic\": \"test-doctor-patronymic\",\r\n  \"phone\": \"+70000000003\",\r\n  \"education\": \"test-education\",\r\n  \"specialty\": \"test-specialty\",\r\n  \"experience\": 1,\r\n  \"price\": 3000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_doctor",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_doctor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding doctor(get_users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true,\r",
									"    \"users\": [\r",
									"        {\r",
									"            \"first_name\": \"\",\r",
									"            \"id\": \"1\",\r",
									"            \"last_name\": \"\",\r",
									"            \"patronymic\": \"\",\r",
									"            \"phone\": \"+71234567890\",\r",
									"            \"user_type\": \"senior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"junior-first-name\",\r",
									"            \"id\": \"2\",\r",
									"            \"last_name\": \"junior-last-name\",\r",
									"            \"patronymic\": \"junior-middle-name\",\r",
									"            \"phone\": \"+70000000002\",\r",
									"            \"user_type\": \"junior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-doctor-first-name\",\r",
									"            \"id\": \"3\",\r",
									"            \"last_name\": \"test-doctor-last-name\",\r",
									"            \"patronymic\": \"test-doctor-patronymic\",\r",
									"            \"phone\": \"+70000000003\",\r",
									"            \"user_type\": \"doctor\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding doctor(get_doctors)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"doctors\": [\r",
									"        {\r",
									"            \"doctor_id\": \"1\",\r",
									"            \"education\": \"test-education\",\r",
									"            \"experience\": \"1\",\r",
									"            \"first_name\": \"test-doctor-first-name\",\r",
									"            \"last_name\": \"test-doctor-last-name\",\r",
									"            \"patronymic\": \"test-doctor-patronymic\",\r",
									"            \"phone\": \"+70000000003\",\r",
									"            \"price\": \"3000\",\r",
									"            \"specialty\": \"test-specialty\",\r",
									"            \"user_id\": \"3\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/get_doctors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"action\": \"registration\",\r",
									"    \"success\": true\r",
									"} \r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"test-patient-last-name\",\r\n  \"first_name\": \"test-patient-first-name\",\r\n  \"patronymic\": \"test-patient-patronymic\",\r\n  \"phone\": \"+70000000004\",\r\n  \"password\": \"12345678\",\r\n  \"user_type\": \"patient\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/registration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check adding patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true,\r",
									"    \"users\": [\r",
									"        {\r",
									"            \"first_name\": \"\",\r",
									"            \"id\": \"1\",\r",
									"            \"last_name\": \"\",\r",
									"            \"patronymic\": \"\",\r",
									"            \"phone\": \"+71234567890\",\r",
									"            \"user_type\": \"senior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"junior-first-name\",\r",
									"            \"id\": \"2\",\r",
									"            \"last_name\": \"junior-last-name\",\r",
									"            \"patronymic\": \"junior-middle-name\",\r",
									"            \"phone\": \"+70000000002\",\r",
									"            \"user_type\": \"junior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-doctor-first-name\",\r",
									"            \"id\": \"3\",\r",
									"            \"last_name\": \"test-doctor-last-name\",\r",
									"            \"patronymic\": \"test-doctor-patronymic\",\r",
									"            \"phone\": \"+70000000003\",\r",
									"            \"user_type\": \"doctor\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-patient-first-name\",\r",
									"            \"id\": \"4\",\r",
									"            \"last_name\": \"test-patient-last-name\",\r",
									"            \"patronymic\": \"test-patient-patronymic\",\r",
									"            \"phone\": \"+70000000004\",\r",
									"            \"user_type\": \"patient\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration second",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"action\": \"registration\",\r",
									"    \"success\": true\r",
									"} \r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"test-patient-last-name-2\",\r\n  \"first_name\": \"test-patient-first-name-2\",\r\n  \"patronymic\": \"test-patient-patronymic-2\",\r\n  \"phone\": \"+70000000005\",\r\n  \"password\": \"12345678\",\r\n  \"user_type\": \"patient\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/registration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second adding patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true,\r",
									"    \"users\": [\r",
									"        {\r",
									"            \"first_name\": \"\",\r",
									"            \"id\": \"1\",\r",
									"            \"last_name\": \"\",\r",
									"            \"patronymic\": \"\",\r",
									"            \"phone\": \"+71234567890\",\r",
									"            \"user_type\": \"senior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"junior-first-name\",\r",
									"            \"id\": \"2\",\r",
									"            \"last_name\": \"junior-last-name\",\r",
									"            \"patronymic\": \"junior-middle-name\",\r",
									"            \"phone\": \"+70000000002\",\r",
									"            \"user_type\": \"junior administrator\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-doctor-first-name\",\r",
									"            \"id\": \"3\",\r",
									"            \"last_name\": \"test-doctor-last-name\",\r",
									"            \"patronymic\": \"test-doctor-patronymic\",\r",
									"            \"phone\": \"+70000000003\",\r",
									"            \"user_type\": \"doctor\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-patient-first-name\",\r",
									"            \"id\": \"4\",\r",
									"            \"last_name\": \"test-patient-last-name\",\r",
									"            \"patronymic\": \"test-patient-patronymic\",\r",
									"            \"phone\": \"+70000000004\",\r",
									"            \"user_type\": \"patient\"\r",
									"        },\r",
									"        {\r",
									"            \"first_name\": \"test-patient-first-name-2\",\r",
									"            \"id\": \"5\",\r",
									"            \"last_name\": \"test-patient-last-name-2\",\r",
									"            \"patronymic\": \"test-patient-patronymic-2\",\r",
									"            \"phone\": \"+70000000005\",\r",
									"            \"user_type\": \"patient\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check hospitals table is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_hospitals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_hospitals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add hospital to senior admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User is not junior administrator\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"region-test\",\r\n  \"settlement_type\": \"settlement-type-test\",\r\n  \"settlement_name\": \"settlement-name-test\",\r\n  \"street\": \"street-test1\",\r\n  \"house\": \"house-test\",\r\n  \"full_name\": \"hospital-name-test\",\r\n  \"admin_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add hospital to doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User is not junior administrator\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"region-test\",\r\n  \"settlement_type\": \"settlement-type-test\",\r\n  \"settlement_name\": \"settlement-name-test\",\r\n  \"street\": \"street-test1\",\r\n  \"house\": \"house-test\",\r\n  \"full_name\": \"hospital-name-test\",\r\n  \"admin_id\": \"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add hospital to patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User is not junior administrator\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"region-test\",\r\n  \"settlement_type\": \"settlement-type-test\",\r\n  \"settlement_name\": \"settlement-name-test\",\r\n  \"street\": \"street-test1\",\r\n  \"house\": \"house-test\",\r\n  \"full_name\": \"hospital-name-test\",\r\n  \"admin_id\": \"4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add hospital",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Hospital successfully added\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"region-test\",\r\n  \"settlement_type\": \"settlement-type-test\",\r\n  \"settlement_name\": \"settlement-name-test\",\r\n  \"street\": \"street-test\",\r\n  \"house\": \"house-test\",\r\n  \"full_name\": \"hospital-name-test\",\r\n  \"admin_id\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check hospitals is added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [\r",
									"        {\r",
									"            \"administrator_id\": \"2\",\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": \"1\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_hospitals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_hospitals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add second hospital to admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Junior administrator already assigned to a hospital\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"region-test-2\",\r\n  \"settlement_type\": \"settlement-type-test-2\",\r\n  \"settlement_name\": \"settlement-name-test-2\",\r\n  \"street\": \"street-test-2\",\r\n  \"house\": \"house-test-2\",\r\n  \"full_name\": \"hospital-name-test-2\",\r\n  \"admin_id\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check doctor has no hospitals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_hospitals?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_hospitals"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Attach doctor to hospital",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Doctor successfully attached to hospital\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"doctor_id\": 1,\r\n\"hospital_id\": 1,\r\n\"junior_admin_id\": 2\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/attach_doctor_to_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attach_doctor_to_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check doctor is attached",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [\r",
									"        {\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": 1,\r",
									"            \"house\": \"house-test\",\r",
									"            \"junior_admin_phone\": \"\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"street\": \"street-test\",\r",
									"            \"time_open\": \"\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_hospitals?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_hospitals"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Detach doctor from hospital",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Hospital ID removed from doctor's list\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"doctor_id\": 1,\r\n\"hospital_id\": 1,\r\n\"junior_admin_id\": 2\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/detach_doctor_from_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detach_doctor_from_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check doctor is detached",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_hospitals?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_hospitals"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot detach twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Hospital ID not found in doctor's list\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"doctor_id\": 1,\r\n\"hospital_id\": 1,\r\n\"junior_admin_id\": 2\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/detach_doctor_from_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"detach_doctor_from_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attach doctor to hospital again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Doctor successfully attached to hospital\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"doctor_id\": 1,\r\n\"hospital_id\": 1,\r\n\"junior_admin_id\": 2\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/attach_doctor_to_hospital",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"attach_doctor_to_hospital"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check doctor is attached again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"hospitals\": [\r",
									"        {\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": 1,\r",
									"            \"house\": \"house-test\",\r",
									"            \"junior_admin_phone\": \"\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"street\": \"street-test\",\r",
									"            \"time_open\": \"\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_hospitals?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_hospitals"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Добавляем данные для дальнейшего тестирования."
		},
		{
			"name": "Slot logic",
			"item": [
				{
					"name": "Check there are no record slots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"schedule\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_schedule_for_patient?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_schedule_for_patient"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add record slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Appointment slot added\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"date\": \"2025-06-11\",\r\n    \"time\": \"14:50\",\r\n    \"hospital_id\": 1,\r\n    \"cabinet\": 101,\r\n    \"junior_admin_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_record_slot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_record_slot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot add same record slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"The slot for this date and time already exists\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"date\": \"2025-05-25\",\r\n    \"time\": \"14:50\",\r\n    \"hospital_id\": 1,\r\n    \"cabinet\": 101,\r\n    \"junior_admin_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_record_slot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_record_slot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check record slot was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"schedule\": [\r",
									"        {\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": \"1\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"junior_admin_phone\": \"+70000000002\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"slot_status\": \"open\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_schedule_for_patient?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_schedule_for_patient"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check there are no patient appointments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что ответ — валидный JSON\r",
									"pm.test(\"Response is valid JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// 3. Проверка, что тело ответа не пустое\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// 4. Проверка структуры JSON\r",
									"pm.test(\"Response has correct structure\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"appointments\");\r",
									"    pm.expect(response.success).to.be.a(\"boolean\");\r",
									"    pm.expect(response.appointments).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// 5. Проверка Content-Type\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 6. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 7. Проверка структуры массива записей\r",
									"pm.test(\"Appointments array structure\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    \r",
									"    if (appointments.length > 0) {\r",
									"        const firstAppointment = appointments[0];\r",
									"        \r",
									"        // Проверка обязательных полей\r",
									"        pm.expect(firstAppointment).to.have.all.keys(\r",
									"            \"appointment_date\",\r",
									"            \"appointment_time\",\r",
									"            \"region\",\r",
									"            \"settlement_type\",\r",
									"            \"settlement_name\",\r",
									"            \"street\",\r",
									"            \"house\",\r",
									"            \"hospital_name\",\r",
									"            \"admin_phone\",\r",
									"            \"specialty\",\r",
									"            \"price\",\r",
									"            \"doctor_name\"\r",
									"        );\r",
									"        \r",
									"        // Проверка типов данных\r",
									"        pm.expect(firstAppointment.appointment_date).to.be.a('string');\r",
									"        pm.expect(firstAppointment.appointment_time).to.be.a('string');\r",
									"        pm.expect(firstAppointment.region).to.be.a('string');\r",
									"        pm.expect(firstAppointment.price).to.be.a('string'); // или number в зависимости от формата\r",
									"    }\r",
									"});\r",
									"\r",
									"// 8. Проверка успешности операции\r",
									"pm.test(\"Operation success\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"// 9. Проверка формата даты (опционально)\r",
									"pm.test(\"Date format validation\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    if (appointments.length > 0) {\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"        pm.expect(appointments[0].appointment_date).to.match(dateRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"appointments\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_patient_appointments?patient_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_patient_appointments"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Book an appointment by 4 id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Booked successfully\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"hospital_id\": 1,\r\n    \"appointment_date\": \"2025-05-25\",\r\n    \"appointment_time\": \"14:50\",\r\n    \"patient_id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/book_appointment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"book_appointment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check appointment booked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что ответ — валидный JSON\r",
									"pm.test(\"Response is valid JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// 3. Проверка, что тело ответа не пустое\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// 4. Проверка структуры JSON\r",
									"pm.test(\"Response has correct structure\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"appointments\");\r",
									"    pm.expect(response.success).to.be.a(\"boolean\");\r",
									"    pm.expect(response.appointments).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// 5. Проверка Content-Type\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 6. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 7. Проверка структуры массива записей\r",
									"pm.test(\"Appointments array structure\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    \r",
									"    if (appointments.length > 0) {\r",
									"        const firstAppointment = appointments[0];\r",
									"        \r",
									"        // Проверка обязательных полей\r",
									"        pm.expect(firstAppointment).to.have.all.keys(\r",
									"            \"appointment_date\",\r",
									"            \"appointment_time\",\r",
									"            \"region\",\r",
									"            \"settlement_type\",\r",
									"            \"settlement_name\",\r",
									"            \"street\",\r",
									"            \"house\",\r",
									"            \"hospital_name\",\r",
									"            \"admin_phone\",\r",
									"            \"specialty\",\r",
									"            \"price\",\r",
									"            \"doctor_name\"\r",
									"        );\r",
									"        \r",
									"        // Проверка типов данных\r",
									"        pm.expect(firstAppointment.appointment_date).to.be.a('string');\r",
									"        pm.expect(firstAppointment.appointment_time).to.be.a('string');\r",
									"        pm.expect(firstAppointment.region).to.be.a('string');\r",
									"        pm.expect(firstAppointment.price).to.be.a('string'); // или number в зависимости от формата\r",
									"    }\r",
									"});\r",
									"\r",
									"// 8. Проверка успешности операции\r",
									"pm.test(\"Operation success\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"// 9. Проверка формата даты (опционально)\r",
									"pm.test(\"Date format validation\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    if (appointments.length > 0) {\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"        pm.expect(appointments[0].appointment_date).to.match(dateRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"appointments\": [\r",
									"        {\r",
									"            \"admin_phone\": \"+70000000002\",\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"doctor_name\": \"test-doctor-last-name test-doctor-first-name test-doctor-patronymic\",\r",
									"            \"hospital_name\": \"hospital-name-test\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"price\": \"3000\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"specialty\": \"test-specialty\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_patient_appointments?patient_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_patient_appointments"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot book an appointment second time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Slot already taken\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"hospital_id\": 1,\r\n    \"appointment_date\": \"2025-05-25\",\r\n    \"appointment_time\": \"14:50\",\r\n    \"patient_id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/book_appointment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"book_appointment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check appointment booked didnt change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что ответ — валидный JSON\r",
									"pm.test(\"Response is valid JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// 3. Проверка, что тело ответа не пустое\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// 4. Проверка структуры JSON\r",
									"pm.test(\"Response has correct structure\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"appointments\");\r",
									"    pm.expect(response.success).to.be.a(\"boolean\");\r",
									"    pm.expect(response.appointments).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// 5. Проверка Content-Type\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 6. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 7. Проверка структуры массива записей\r",
									"pm.test(\"Appointments array structure\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    \r",
									"    if (appointments.length > 0) {\r",
									"        const firstAppointment = appointments[0];\r",
									"        \r",
									"        // Проверка обязательных полей\r",
									"        pm.expect(firstAppointment).to.have.all.keys(\r",
									"            \"appointment_date\",\r",
									"            \"appointment_time\",\r",
									"            \"region\",\r",
									"            \"settlement_type\",\r",
									"            \"settlement_name\",\r",
									"            \"street\",\r",
									"            \"house\",\r",
									"            \"hospital_name\",\r",
									"            \"admin_phone\",\r",
									"            \"specialty\",\r",
									"            \"price\",\r",
									"            \"doctor_name\"\r",
									"        );\r",
									"        \r",
									"        // Проверка типов данных\r",
									"        pm.expect(firstAppointment.appointment_date).to.be.a('string');\r",
									"        pm.expect(firstAppointment.appointment_time).to.be.a('string');\r",
									"        pm.expect(firstAppointment.region).to.be.a('string');\r",
									"        pm.expect(firstAppointment.price).to.be.a('string'); // или number в зависимости от формата\r",
									"    }\r",
									"});\r",
									"\r",
									"// 8. Проверка успешности операции\r",
									"pm.test(\"Operation success\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"// 9. Проверка формата даты (опционально)\r",
									"pm.test(\"Date format validation\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    if (appointments.length > 0) {\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"        pm.expect(appointments[0].appointment_date).to.match(dateRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"appointments\": [\r",
									"        {\r",
									"            \"admin_phone\": \"+70000000002\",\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"doctor_name\": \"test-doctor-last-name test-doctor-first-name test-doctor-patronymic\",\r",
									"            \"hospital_name\": \"hospital-name-test\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"price\": \"3000\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"specialty\": \"test-specialty\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_patient_appointments?patient_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_patient_appointments"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot book an appointment booked by another person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Slot already taken\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"hospital_id\": 1,\r\n    \"appointment_date\": \"2025-05-25\",\r\n    \"appointment_time\": \"14:50\",\r\n    \"patient_id\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/book_appointment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"book_appointment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check appointment booked didnt change Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что ответ — валидный JSON\r",
									"pm.test(\"Response is valid JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// 3. Проверка, что тело ответа не пустое\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// 4. Проверка структуры JSON\r",
									"pm.test(\"Response has correct structure\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"appointments\");\r",
									"    pm.expect(response.success).to.be.a(\"boolean\");\r",
									"    pm.expect(response.appointments).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// 5. Проверка Content-Type\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 6. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 7. Проверка структуры массива записей\r",
									"pm.test(\"Appointments array structure\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    \r",
									"    if (appointments.length > 0) {\r",
									"        const firstAppointment = appointments[0];\r",
									"        \r",
									"        // Проверка обязательных полей\r",
									"        pm.expect(firstAppointment).to.have.all.keys(\r",
									"            \"appointment_date\",\r",
									"            \"appointment_time\",\r",
									"            \"region\",\r",
									"            \"settlement_type\",\r",
									"            \"settlement_name\",\r",
									"            \"street\",\r",
									"            \"house\",\r",
									"            \"hospital_name\",\r",
									"            \"admin_phone\",\r",
									"            \"specialty\",\r",
									"            \"price\",\r",
									"            \"doctor_name\"\r",
									"        );\r",
									"        \r",
									"        // Проверка типов данных\r",
									"        pm.expect(firstAppointment.appointment_date).to.be.a('string');\r",
									"        pm.expect(firstAppointment.appointment_time).to.be.a('string');\r",
									"        pm.expect(firstAppointment.region).to.be.a('string');\r",
									"        pm.expect(firstAppointment.price).to.be.a('string'); // или number в зависимости от формата\r",
									"    }\r",
									"});\r",
									"\r",
									"// 8. Проверка успешности операции\r",
									"pm.test(\"Operation success\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"// 9. Проверка формата даты (опционально)\r",
									"pm.test(\"Date format validation\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    if (appointments.length > 0) {\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"        pm.expect(appointments[0].appointment_date).to.match(dateRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"appointments\": [\r",
									"        {\r",
									"            \"admin_phone\": \"+70000000002\",\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"doctor_name\": \"test-doctor-last-name test-doctor-first-name test-doctor-patronymic\",\r",
									"            \"hospital_name\": \"hospital-name-test\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"price\": \"3000\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"specialty\": \"test-specialty\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_patient_appointments?patient_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_patient_appointments"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check slot is closed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"schedule\": [\r",
									"        {\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": \"1\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"junior_admin_phone\": \"+70000000002\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"slot_status\": \"close\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_schedule_for_patient?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_schedule_for_patient"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel appointment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.affected_rows).to.exist;\r",
									"  pm.expect(responseData.message).to.exist;\r",
									"  pm.expect(responseData.success).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Affected rows is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.affected_rows).to.be.a('number');\r",
									"    pm.expect(responseData.affected_rows).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Success is a boolean\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.success).to.be.a('boolean');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"record_id\": 1,\r\n    \"patient_id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/cancel_appointment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"cancel_appointment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check there are no patient appointments after cancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка, что ответ — валидный JSON\r",
									"pm.test(\"Response is valid JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// 3. Проверка, что тело ответа не пустое\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// 4. Проверка структуры JSON\r",
									"pm.test(\"Response has correct structure\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.all.keys(\"success\", \"appointments\");\r",
									"    pm.expect(response.success).to.be.a(\"boolean\");\r",
									"    pm.expect(response.appointments).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// 5. Проверка Content-Type\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 6. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 7. Проверка структуры массива записей\r",
									"pm.test(\"Appointments array structure\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    \r",
									"    if (appointments.length > 0) {\r",
									"        const firstAppointment = appointments[0];\r",
									"        \r",
									"        // Проверка обязательных полей\r",
									"        pm.expect(firstAppointment).to.have.all.keys(\r",
									"            \"appointment_date\",\r",
									"            \"appointment_time\",\r",
									"            \"region\",\r",
									"            \"settlement_type\",\r",
									"            \"settlement_name\",\r",
									"            \"street\",\r",
									"            \"house\",\r",
									"            \"hospital_name\",\r",
									"            \"admin_phone\",\r",
									"            \"specialty\",\r",
									"            \"price\",\r",
									"            \"doctor_name\"\r",
									"        );\r",
									"        \r",
									"        // Проверка типов данных\r",
									"        pm.expect(firstAppointment.appointment_date).to.be.a('string');\r",
									"        pm.expect(firstAppointment.appointment_time).to.be.a('string');\r",
									"        pm.expect(firstAppointment.region).to.be.a('string');\r",
									"        pm.expect(firstAppointment.price).to.be.a('string'); // или number в зависимости от формата\r",
									"    }\r",
									"});\r",
									"\r",
									"// 8. Проверка успешности операции\r",
									"pm.test(\"Operation success\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"\r",
									"// 9. Проверка формата даты (опционально)\r",
									"pm.test(\"Date format validation\", function() {\r",
									"    const appointments = pm.response.json().appointments;\r",
									"    if (appointments.length > 0) {\r",
									"        const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"        pm.expect(appointments[0].appointment_date).to.match(dateRegex);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"appointments\": [],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_patient_appointments?patient_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_patient_appointments"
							],
							"query": [
								{
									"key": "patient_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check slot is open again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"schedule\": [\r",
									"        {\r",
									"            \"appointment_date\": \"2025-05-25\",\r",
									"            \"appointment_time\": \"14:50:00\",\r",
									"            \"full_name\": \"hospital-name-test\",\r",
									"            \"hospital_id\": \"1\",\r",
									"            \"house\": \"house-test\",\r",
									"            \"junior_admin_phone\": \"+70000000002\",\r",
									"            \"region\": \"region-test\",\r",
									"            \"settlement_name\": \"settlement-name-test\",\r",
									"            \"settlement_type\": \"settlement-type-test\",\r",
									"            \"slot_status\": \"open\",\r",
									"            \"street\": \"street-test\"\r",
									"        }\r",
									"    ],\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_doctor_schedule_for_patient?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_doctor_schedule_for_patient"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Book an appointment by 4 id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"message\": \"Booked successfully\",\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"hospital_id\": 1,\r\n    \"appointment_date\": \"2025-05-25\",\r\n    \"appointment_time\": \"14:50\",\r\n    \"patient_id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/book_appointment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"book_appointment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check waitlist is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true,\r",
									"    \"waitlist\": []\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_waitlist?doctor_id=1&junior_admin_id=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_waitlist"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								},
								{
									"key": "junior_admin_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check waitlist requires hospital",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Your hospital not found\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_waitlist?doctor_id=1&junior_admin_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_waitlist"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								},
								{
									"key": "junior_admin_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check 0 people in waitlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"count\": 0,\r",
									"    \"success\": true\r",
									"}\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get_waitlist_count?doctor_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get_waitlist_count"
							],
							"query": [
								{
									"key": "doctor_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add 5id to waitlist",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"doctor_id\": 1,\r\n    \"patient_id\": 5,\r\n    \"last_name\": \"test-patient-last-name-2\",\r\n    \"first_name\": \"test-patient-first-name-2\",\r\n    \"patronymic\": \"test-patient-patronymic-2\",\r\n    \"phone\": \"+70000000005\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/add_patient_to_waitlist",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"add_patient_to_waitlist"
							]
						}
					},
					"response": []
				}
			],
			"description": "Добавление/удаление слотов, запись,"
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Check you cannot delete senior admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Forbidden for user type: senior administrator\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot delete junior admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"Forbidden for user type: junior administrator\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot delete deleted doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User not found\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=true\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"success\": true\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot delete deleted patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User not found\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check you cannot delete non-existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Проверка статуса 200 OK\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"// 2. Проверка адекватного времени работы\r",
									"pm.test(\"Response time < 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// 3.\r",
									"pm.test(\"Content-Type is application/json\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// 4.\r",
									"pm.test(\"Response has success=false\", () => {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"success\", false);\r",
									"});\r",
									"\r",
									"pm.test(\"Response matches expected JSON\", function () {\r",
									"    const expected = {\r",
									"    \"error\": \"User not found\",\r",
									"    \"success\": false\r",
									"}\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(expected);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/delete_self_account?user_id=666",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete_self_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "666"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Удаление пользователей"
		}
	]
}